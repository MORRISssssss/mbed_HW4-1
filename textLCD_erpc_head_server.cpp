/*
 * You can write copyrights rules here. These rules will be copied into the outputs.
 */

/*
 * Generated by erpcgen 1.10.0 on Tue May  2 21:07:19 2023.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "textLCD_erpc_head_server.h"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 11000 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif

ERPC_MANUALLY_CONSTRUCTED_STATIC(textLCDService_service, s_textLCDService_service);



// Call the correct server shim based on method unique ID.
erpc_status_t textLCDService_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case ktextLCDService_Locate_id:
        {
            erpcStatus = Locate_shim(codec, messageFactory, sequence);
            break;
        }

        case ktextLCDService_Cls_id:
        {
            erpcStatus = Cls_shim(codec, messageFactory, sequence);
            break;
        }

        case ktextLCDService_Rows_id:
        {
            erpcStatus = Rows_shim(codec, messageFactory, sequence);
            break;
        }

        case ktextLCDService_Columns_id:
        {
            erpcStatus = Columns_shim(codec, messageFactory, sequence);
            break;
        }

        case ktextLCDService_Putc_id:
        {
            erpcStatus = Putc_shim(codec, messageFactory, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for Locate of textLCDService interface.
erpc_status_t textLCDService_service::Locate_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint8_t col;
    uint8_t row;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&col);

    codec->read(&row);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        Locate(col, row);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, ktextLCDService_service_id, ktextLCDService_Locate_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for Cls of textLCDService interface.
erpc_status_t textLCDService_service::Cls_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;


    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        Cls();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, ktextLCDService_service_id, ktextLCDService_Cls_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for Rows of textLCDService interface.
erpc_status_t textLCDService_service::Rows_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint8_t result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = Rows();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, ktextLCDService_service_id, ktextLCDService_Rows_id, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for Columns of textLCDService interface.
erpc_status_t textLCDService_service::Columns_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint8_t result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = Columns();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, ktextLCDService_service_id, ktextLCDService_Columns_id, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for Putc of textLCDService interface.
erpc_status_t textLCDService_service::Putc_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint8_t c;
    uint8_t result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&c);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = Putc(c);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, ktextLCDService_service_id, ktextLCDService_Putc_id, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

erpc_service_t create_textLCDService_service(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) textLCDService_service();
#else
    if (s_textLCDService_service.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_textLCDService_service.construct();
        service = s_textLCDService_service.get();
    }
#endif

    return service;
}

void destroy_textLCDService_service(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    erpc_assert(service != NULL);
    delete (textLCDService_service *)service;
#else
    (void)service;
    erpc_assert(service == s_textLCDService_service.get());
    s_textLCDService_service.destroy();
#endif
}

